// @author Octa
//Join My Community: https://discord.gg/KCEPAHxJWP
//@version=5
const bool DEBUG = false
const int maxBoxesCount = 500
const int maxDistanceToLastBar = 750
const int atrLen = 14
const int deleteUntouchedAfterXBars = 200
const int showLastX = 25

indicator("Liquidity Sentiment + Volume | Profile", "LS/VP", true, max_boxes_count = maxBoxesCount, max_labels_count = maxBoxesCount, max_lines_count = maxBoxesCount, max_bars_back = 5000)

ppLen = 47

vpSH  = true
vpHVT = float(0.53)
vpLVT = float(0.27)

spSH  = true
spBLC = input.color(color.new(#26a69a, 73))
spBRC = input.color(color.new(#ef5350, 73))

rpNR  = int(150)
size   = input.int(27) / 100

drpHO = int(13)

type bar
    float o = open
    float h = high
    float l = low
    float c = close
    float v = volume
    int   i = bar_index

type pivotPoint
    int    x
    float  h
    float  h1
    float  l
    float  l1

bar b = bar.new()

var pivotPoint pp = pivotPoint.new()

bull  = b.c > b.o
nzV   = nz(b.v)

rpVST = array.new_float(rpNR + 1, 0.)
rpVSB = array.new_float(rpNR + 1, 0.)
rpVSD = array.new_float(rpNR + 1, 0.)

var dRP = array.new_box()
var dPC = array.new_line()

var int   x2   = 0
var float pir  = na
var int   pp_x = na
var float pp_y = na

f_drawLabelX(_x, _y, _text, _xloc, _yloc, _color, _style, _textcolor, _size, _textalign, _tooltip) =>
    var lb = label.new(_x, _y, _text, _xloc, _yloc, _color, _style, _textcolor, _size, _textalign, _tooltip)
    lb.set_xy(_x, _y)
    lb.set_text(_text)
    lb.set_tooltip(_tooltip)
    lb.set_textcolor(_textcolor)

var float anchorPrice = na

isFirstVisibleBar = time == chart.left_visible_bar_time
isLastVisibleBar = time == chart.right_visible_bar_time

var int contadorBarras = na

if isFirstVisibleBar
    contadorBarras := 1
else
    contadorBarras := nz(contadorBarras[1]) + 1

rpLN = contadorBarras
pHST = ta.highest(high, rpLN > 0 ? rpLN + 1 : 1)
pLST = ta.lowest (low , rpLN > 0 ? rpLN + 1 : 1)
pSTP = (pHST - pLST) / rpNR

if isLastVisibleBar

    if dRP.size() > 0
        for i = 0 to dRP.size() - 1
            box.delete(dRP.shift())

    if dPC.size() > 0
        for i = 0 to dPC.size() - 1
            line.delete(dPC.shift())

    for bI = rpLN to 0
        l = 0
        for pLL = pLST to pHST by pSTP
            if b.h[bI] >= pLL and b.l[bI] < pLL + pSTP
                rpVST.set(l, rpVST.get(l) + nzV[bI] * ((b.h[bI] - b.l[bI]) == 0 ? 1 : pSTP / (b.h[bI] - b.l[bI])) )
                
                if bull[bI]
                    rpVSB.set(l, rpVSB.get(l) + nzV[bI] * ((b.h[bI] - b.l[bI]) == 0 ? 1 : pSTP / (b.h[bI] - b.l[bI])) )
            l += 1

    for l = 0 to rpNR - 1
        bbp  = 2 * rpVSB.get(l) - rpVST.get(l)
        rpVSD.set(l, rpVSD.get(l) + bbp * (bbp > 0 ? 1 : -1) )

    for l = 0 to rpNR - 1
        if vpSH and spSH
            bbp = 2 * rpVSB.get(l) - rpVST.get(l)
            sBI = b.i - int(rpVST.get(l) / rpVST.max() * rpLN * size) + rpLN * size + drpHO
            eBI = b.i + drpHO + rpLN * size
            dRP.push(box.new(sBI, pLST + (l + 0.1) * pSTP, eBI, pLST + (l + 0.9) * pSTP, bbp > 0 ? spBLC : spBRC, bgcolor = bbp > 0 ? spBLC : spBRC ))